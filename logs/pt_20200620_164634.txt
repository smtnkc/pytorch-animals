Python Version: 3.7.6
PyTorch Version: 1.5.0
Torchvision Version: 0.6.0
Running on cpu...

ARCHITECTURE:

AlexNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=9216, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=4096, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=4096, out_features=4, bias=True)
  )
)

features.0.weight         requires_grad = False
features.0.bias           requires_grad = False
features.3.weight         requires_grad = False
features.3.bias           requires_grad = False
features.6.weight         requires_grad = False
features.6.bias           requires_grad = False
features.8.weight         requires_grad = False
features.8.bias           requires_grad = False
features.10.weight        requires_grad = False
features.10.bias          requires_grad = False
classifier.1.weight       requires_grad = False
classifier.1.bias         requires_grad = False
classifier.4.weight       requires_grad = False
classifier.4.bias         requires_grad = False
classifier.6.weight       requires_grad = True
classifier.6.bias         requires_grad = True

Created json args file	-> logs/pt_20200620_164634.json

RUNNING ARGS:
{
    "seed": 2020,
    "batch_size": 14,
    "epochs": 2,
    "lr": 0.0001,
    "optimizer": "adam",
    "input_size": 224,
    "debug": false,
    "pretrained": true,
    "device": "cpu",
    "t_start": "20200620_164634"
}

Created stats file	-> logs/pt_20200620_164634.csv

TRAINING 2 EPOCHS...

     epoch train_loss  train_acc   train_f1   val_loss    val_acc     val_f1
         0   0.637604   0.782366   0.781533   0.185741    0.96875   0.968885
         1   0.223534   0.947545   0.947867   0.100056   0.977679   0.977787

Training completed in 0m 57s

Saved best checkpoint	-> models/pt_20200620_164634_0.977679.pth

TESTING...
272/280 predictions are correct -> Test acc: 0.971429   f1: 0.971546

